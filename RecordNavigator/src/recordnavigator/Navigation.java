/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package recordnavigation;

import com.zaxxer.hikari.HikariDataSource;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTable;
import javax.swing.RowSorter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import java.util.Vector;

/**
 *
 * @author mahith
 */
public class Navigation extends javax.swing.JFrame {

    /**
     * Creates new form Navigation
     */
    static int displayNumOfRecords = 0;
    String firstLine = "";
    int numOfRows, lastIndex = 0;
    Object[] tableRows;
    DefaultTableModel table;
    RowSorter<TableModel> sorter;
    JTable table1;
    TableModel model;
    Object tableRow;
    static Connection conn = null;
    static PreparedStatement pstmt = null;
    static int columnCount;
    Vector data_rows;
    Vector column_name;
    ResultSet rs;
    ResultSetMetaData rsmd;
    int lastRow = 0;
    int hitCount;
    String sql = "";
    private static HikariDataSource hikari;
    int prevDisplayNumOfRecords;

    public Navigation() {
        initComponents();
    }

    public void tableCleanUp() {

        for (int j = 0; j < numOfRows; j++) {

            table.removeRow(0);
        }

    }

    public static void jdbcConnection() {

        try {

            hikari = new HikariDataSource();
            hikari.setMaximumPoolSize(2);
            hikari.setIdleTimeout(100);
            hikari.setJdbcUrl("jdbc:mysql://localhost:3306/datanavigation");
            hikari.setUsername("root");
            hikari.setPassword("2108");
            conn = hikari.getConnection();
            if (conn != null) {

                System.out.println("connection established");

            }

        } catch (Exception e) {

            System.out.println("Not connected to Database");

        }
    }

    public void updateHitCount() throws SQLException {

        sql = "UPDATE hitcount SET value=value+1";
        pstmt = conn.prepareStatement(sql);
        pstmt.executeUpdate();
        sql = "select value from hitcount";
        pstmt = conn.prepareStatement(sql);
        rs = pstmt.executeQuery();
        rs.next();
        hitCount = rs.getInt(1);
        count.setText(Integer.toString(hitCount));
    }

    public void SizeOfDataSource() throws SQLException {

        sql = "select count(*) from datanavigation";
        pstmt = conn.prepareStatement(sql);
        rs = pstmt.executeQuery();
        rs.next();
        lastRow = rs.getInt(1);
    }

    public void printResultToTable() throws SQLException {
        //rs.next points to the next row
        while (rs.next()) {

            data_rows = new Vector();
            for (int j = 1; j < columnCount; j++) {
                data_rows.addElement(rs.getString(j));
            }
            table.addRow(data_rows);
        }

    }

    public void setTableIdentifiers() throws SQLException {

        column_name = new Vector();
        for (int i = 1; i < columnCount; i++) {

            column_name.addElement(rsmd.getColumnName(i));
        }
        table.setColumnIdentifiers(column_name);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Display = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        Clear = new javax.swing.JButton();
        Next = new javax.swing.JButton();
        Previous = new javax.swing.JButton();
        First = new javax.swing.JButton();
        Last = new javax.swing.JButton();
        count = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        Cleanup = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Display.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "5", "10", "15", "20", "30", "50" }));
        Display.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DisplayActionPerformed(evt);
            }
        });

        jLabel1.setText("Display");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTable1);

        Clear.setText("Clear");
        Clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearActionPerformed(evt);
            }
        });

        Next.setText("Next");
        Next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NextActionPerformed(evt);
            }
        });

        Previous.setText("previous");
        Previous.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PreviousActionPerformed(evt);
            }
        });

        First.setText("First");
        First.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FirstActionPerformed(evt);
            }
        });

        Last.setText("last");
        Last.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LastActionPerformed(evt);
            }
        });

        count.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                countActionPerformed(evt);
            }
        });

        jLabel2.setText("HitCount");

        Cleanup.setText("CleanUp");
        Cleanup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CleanupActionPerformed(evt);
            }
        });
        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 677, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Display, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(First)
                        .addGap(18, 18, 18)
                        .addComponent(Last)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(count, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(Previous)
                        .addGap(37, 37, 37)
                        .addComponent(Next)
                        .addGap(18, 18, 18)
                        .addComponent(Clear)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Cleanup)
                        .addGap(12, 12, 12)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Display, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(Last)
                    .addComponent(First)
                    .addComponent(count, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(25, 25, 25)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 436, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Next)
                    .addComponent(Clear)
                    .addComponent(Previous)
                    .addComponent(Cleanup))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void DisplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DisplayActionPerformed

        displayNumOfRecords = Integer.parseInt(Display.getSelectedItem().toString());
        // Checking if the previous search request and the current request are not the same
        if (lastIndex != displayNumOfRecords) {
            try {
                // Calculating size(number of rows) of the database
                if (lastRow == 0) {
                    SizeOfDataSource();
                }
                // Updating number of hits to the database.
                updateHitCount();
                sql = "select * from datanavigation where SNO<=?";
                pstmt = conn.prepareStatement(sql);
                pstmt.setInt(1, displayNumOfRecords);
                rs = pstmt.executeQuery();
                //An object that can be used to get information about the types and properties of the columns in a ResultSet object. 
                rsmd = rs.getMetaData();
                columnCount = rsmd.getColumnCount();
                table = (DefaultTableModel) jTable1.getModel();
                //Checking whether the table is empty or not to perform cleanup operation
                if (table.getRowCount() != 0) {
                    tableCleanUp();
                }
                // Setting of column identifiers if it is not already set in the table.
                if (table.getColumnCount() == 0) {
                    setTableIdentifiers();
                }
                //printing the resultSet to JTable
                printResultToTable();
                numOfRows = table.getRowCount();
                lastIndex = numOfRows;
                table1 = jTable1;
                // Enable sorting on table rows based on column identifier
                sorter = new TableRowSorter<TableModel>(table);
                table1.setRowSorter(sorter);

            } catch (SQLException ex) {
                Logger.getLogger(Navigation.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_DisplayActionPerformed

    private void ClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearActionPerformed
        // TODO add your handling code here:

        tableCleanUp();
        lastIndex = 0;

    }//GEN-LAST:event_ClearActionPerformed

    private void NextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NextActionPerformed

        try {
            // Checking if the table results are displaying last 5/10 etc rows
            if (lastIndex + numOfRows > lastRow) {

                return;
            }

            if (numOfRows < displayNumOfRecords) {

                return;
            }
            tableCleanUp();
            updateHitCount();
            sql = "select * from datanavigation where SNO>? and SNO<=?";
            pstmt = conn.prepareStatement(sql);
            pstmt.setInt(1, lastIndex);
            pstmt.setInt(2, (lastIndex + displayNumOfRecords));
            rs = pstmt.executeQuery();
            printResultToTable();
        } catch (SQLException ex) {
            Logger.getLogger(Navigation.class.getName()).log(Level.SEVERE, null, ex);
        }
        lastIndex = lastIndex + numOfRows;

    }//GEN-LAST:event_NextActionPerformed

    private void PreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PreviousActionPerformed

        // Checking if the table results are already displaying first 5/10/15 etc pages 
        if (lastIndex <= displayNumOfRecords) {

            return;

        }
        tableCleanUp();
        try {
            updateHitCount();
            sql = "select * from datanavigation where SNO>? and SNO<=?";
            pstmt = conn.prepareStatement(sql);
            pstmt.setInt(1, (lastIndex - (2 * displayNumOfRecords)));
            pstmt.setInt(2, (lastIndex - displayNumOfRecords));
            rs = pstmt.executeQuery();
            printResultToTable();
        } catch (SQLException ex) {
            Logger.getLogger(Navigation.class.getName()).log(Level.SEVERE, null, ex);
        }

        lastIndex = lastIndex - numOfRows;

    }//GEN-LAST:event_PreviousActionPerformed

    private void FirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FirstActionPerformed

        if (lastIndex != displayNumOfRecords) {

            if (table.getRowCount() != 0) {
                tableCleanUp();
            }
            try {
                updateHitCount();
                sql = "select * from datanavigation where SNO<=?";
                pstmt = conn.prepareStatement(sql);
                pstmt.setInt(1, displayNumOfRecords);
                rs = pstmt.executeQuery();
                printResultToTable();
            } catch (SQLException ex) {
                Logger.getLogger(Navigation.class.getName()).log(Level.SEVERE, null, ex);
            }

            numOfRows = table.getRowCount();
            lastIndex = numOfRows;
        }
    }//GEN-LAST:event_FirstActionPerformed

    private void LastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LastActionPerformed
        // TODO add your handling code here:
        if (lastIndex != lastRow) {

            if (table.getRowCount() != 0) {
                tableCleanUp();
            }
            try {
                updateHitCount();
                sql = "SELECT * FROM datanavigation where SNO>? and SNO<=?";
                pstmt = conn.prepareStatement(sql);
                pstmt.setInt(1, (lastRow - displayNumOfRecords));
                pstmt.setInt(2, lastRow);
                rs = pstmt.executeQuery();
                printResultToTable();
            } catch (SQLException ex) {
                Logger.getLogger(Navigation.class.getName()).log(Level.SEVERE, null, ex);
            }

            lastIndex = lastRow;

        }
    }//GEN-LAST:event_LastActionPerformed

    private void countActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_countActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_countActionPerformed

    private void CleanupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CleanupActionPerformed
        try {
            // TODO add your handling code here:
            if (table.getRowCount() != 0) {
                tableCleanUp();
            }
            sql = "UPDATE hitcount SET value=0";
            pstmt = conn.prepareStatement(sql);
            pstmt.executeUpdate();
            count.setText("");
            lastIndex = 0;

        } catch (SQLException ex) {
            Logger.getLogger(Navigation.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                pstmt.close();
                conn.close();
                rs.close();
                hikari.close();
            } catch (SQLException ex) {
                Logger.getLogger(Navigation.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_CleanupActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Navigation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Navigation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Navigation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Navigation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        jdbcConnection();

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Navigation().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Cleanup;
    private javax.swing.JButton Clear;
    private javax.swing.JComboBox Display;
    private javax.swing.JButton First;
    private javax.swing.JButton Last;
    private javax.swing.JButton Next;
    private javax.swing.JButton Previous;
    private javax.swing.JTextField count;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}

//            //rs.next points to the next row
//            while (rs.next()) {
//
//                for (int i = 1; i <= columnCount; i++) {
//                    if (i > 1) {
//                        System.out.print(",  ");
//                    }
//                    String columnValue = rs.getString(i);
//                    System.out.print(columnValue + " ");
//                }
//                
//                //table.addRow(columnValue.trim().split(","));
//                System.out.println(" ");
//
//            }
